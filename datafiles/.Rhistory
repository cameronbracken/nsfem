hist(a)
help(hist)
library(MASS)
truehist(a)
image(t(a))
image(a)
a
persp(a)
a
image(a)
image(t(a)
)
help(image)
image(t(a)[ncol(a):1,])
grid()
image(t(a)[ncol(a):1,])
help(grid)
grid(nx=6,ny=8)
grid(nx=6,ny=8,col='black',lty='solid')
image(t(a)[ncol(a):1,])
grid(nx=6,ny=8,col='black',lty='solid')
help(image)
image(t(a)[ncol(a):1,],col=c('black','white'))
image(t(a)[ncol(a):1,],col=c('black','grey'))
image(t(a),col=c('white','grey'))
R.Version()
a=c(1,2,3)
nrow(a)
ncol(a)
1:10!=2:5
1:10!=2
library(leaps)
help(leaps)
library(leaps)
help(leaps)
library(leaps)
leaps
help(leaps.setup)
help(||)
help('||')
library(locfit)
gcvplot
help(match.call)
m=match.call()
f=function(x){f=x^2;m=match.call()}
f(3)
m
f=function(x){f=x^2;m=match.call();print(m)}
m
f(3)
f=function(x){f=x^2;m=match.call();eval(m)}
f
f(3)
sys.frame()
sys.parent()
f=function(x){f=x^2;m=match.call();eval(m,sys.frame(sys.parent))}
f(3)
f=function(x){f=x^2;m=match.call();eval(m,sys.frame(sys.parent()))}
f(3)
gcv
x=1:5
y=2:6
gcvmod=function (x, ...) #
{#
    m <- match.call()#
    if (is.numeric(x)) #
        m[[1]] <- as.name("locfit.raw")#
    else {#
        m[[1]] <- as.name("locfit")#
        names(m)[2] <- "formula"#
    }#
    fit <- eval(m, sys.frame(sys.parent()))#
    z <- fit$dp[c("lk", "df1", "df2")]#
    n <- fit$mi["n"]#
    z <- c(z, (-2 * n * z[1])/(n - z[2])^2)#
    names(z) <- c("lik", "infl", "vari", "gcv")#
    z#
}
gcvmod=function (x, ...) {    m <- match.call()    if (is.numeric(x))         m[[1]] <- as.name("locfit.raw")    else {        m[[1]] <- as.name("locfit")        names(m)[2] <- "formula"    }    print(m)    fit <- eval(m, sys.frame(sys.parent()))    z <- fit$dp[c("lk", "df1", "df2")]    n <- fit$mi["n"]    z <- c(z, (-2 * n * z[1])/(n - z[2])^2)    names(z) <- c("lik", "infl", "vari", "gcv")    z}
gvmod(x=x,y=y)
gcvmod(x=x,y=y)
gcvplot(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
gcvplot
gvplotmod=function (..., alpha, df = 2) {    m <- match.call()    m[[1]] <- as.name("gcv")    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        z[i, ] <- eval(m, sys.frame(sys.parent()))    }    ret <- list(alpha = alpha, cri = "GCV", df = z[, df], values = z[,         4])    class(ret) <- "gcvplot"    ret}
gcvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
gvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
gcvmod(x=x,y=y,alpha=.95)
gcvplotmod=function (..., alpha, df = 2) {    m <- match.call()    m[[1]] <- as.name("gcv")    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        print(sys.frame(sys.parent()))        z[i, ] <- eval(m, sys.frame(sys.parent()))    }    ret <- list(alpha = alpha, cri = "GCV", df = z[, df], values = z[,         4])    class(ret) <- "gcvplot"    ret}
gcvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
gcvplotmod=function (..., alpha, df = 2) {    m <- match.call()    m[[1]] <- as.name("gcv")    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        z[i, ] <- eval(m,)    }    ret <- list(alpha = alpha, cri = "GCV", df = z[, df], values = z[,         4])    class(ret) <- "gcvplot"    ret}
gcvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
help(quieet)
help(quiet)
help(sh)
gcvplotmod=function (..., alpha, df = 2) {    m <- match.call()    m[[1]] <- as.name("gcv")    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        z[i, ] <- eval(m)    }    ret <- list(alpha = alpha, cri = "GCV", df = z[, df], values = z[,         4])    class(ret) <- "gcvplot"    ret}
gvplotmod=function (..., alpha, df = 2) {    m <- match.call()    print(m)    m[[1]] <- as.name("gcv")    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        z[i, ] <- eval(m)    }    ret <- list(alpha = alpha, cri = "GCV", df = z[, df], values = z[,         4])    class(ret) <- "gcvplot"    ret}
gcvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
help(eval)
m
gcv(x = x, y = y, alpha = 1)
gcvplotmod=function (..., alpha, df = 2) {    m <- match.call()    print(m)    m[[1]] <- as.name("gcv")    print(m)    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        z[i, ] <- eval(m)    }    ret <- list(alpha = alpha, cri = "GCV", df = z[, df], values = z[,         4])    class(ret) <- "gcvplot"    ret}
gcvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
match.call
help(mach.call)
help(match.call)
match.call(get, call("get", "abc", i = FALSE, p = 3))#
## -> get(x = "abc", pos = 3, inherits = FALSE)#
fun <- function(x, lower = 0, upper = 1) {#
  structure((x - lower) / (upper - lower), CALL = match.call())#
}#
fun(4 * atan(1), u = pi)
gcv
gcvplot
gcvplotmod=function (..., alpha, df = 2) {    m <- match.call()    print(m)    m[[1]] <- as.name("gcv")    print(m)    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        print(m[[1]])        print(m[[2]])        print(m[[3]])        z[i, ] <- eval(m)    }    ret <- list(alpha = alpha, cri = "GCV", df = z[, df], values = z[,         4])    class(ret) <- "gcvplot"    ret}
gcvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
gcvplotmod=function (..., alpha, df = 2) {    m <- match.call()    print(m)    m[[1]] <- as.name("gcv")    print(m)    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        print(m[[1]])        print(m[[2]])        print(m[[3]])        print(m[[4]])        z[i, ] <- eval(m)    }    ret <- list(alpha = alpha, cri = "GCV", df = z[, df], values = z[,         4])    class(ret) <- "gcvplot"    ret}
gcvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
gcvplotmod=function (..., alpha, df = 2) {    m <- match.call()    print(m)    m[[1]] <- as.name("gcv")    print(m)    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        print(m[[1]])        print(m[[2]])        print(m[[3]])        print(m[[4]])        print(m[[5]])        z[i, ] <- eval(m)    }    ret <- list(alpha = alpha, cri = "GCV", df = z[, df], values = z[,         4])    class(ret) <- "gcvplot"    ret}
gcvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
gcvplotmod=function (..., alpha, df = 2) {    m <- match.call()    print(m)    m[[1]] <- as.name("gcv")    print(m)    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        z[i, ] <- eval(as.character(m))    }    ret <- list(alpha = alpha, cri = "GCV", df = z[, df], values = z[,         4])    class(ret) <- "gcvplot"    ret}
gcvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
gcvplotmod=function (..., alpha, df = 2) {    m <- match.call()    print(m)    m[[1]] <- as.name("gcv")    print(m)    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        z[i, ] <- eval(as.character(m))    }    ret <- list(alpha = alpha, values = z[,         4])    class(ret) <- "gcvplot"    ret}
gcvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
gcvplotmod=function (..., alpha, df = 2) {    m <- match.call()    print(m)    m[[1]] <- as.name("gcv")    print(m)    m$df <- NULL    if (!is.matrix(alpha))         alpha <- matrix(alpha, ncol = 1)    k <- nrow(alpha)    z <- matrix(nrow = k, ncol = 4)    for (i in 1:k) {        m$alpha <- alpha[i, ]        print(m)        z[i, ] <- eval(as.character(m))    }    ret <- list(alpha = alpha, values = z[,         4])    #class(ret) <- "gcvplot"    ret}
gcvplotmod(x=x,y=y,alpha=seq(.1,1,by=.05),df=2)
gcv
gcvplot
gcvplotmod=function (..., alpha, df = 2) #
{#
    m <- match.call()#
    m[[1]] <- as.name("gcv")#
    m$df <- NULL#
    if (!is.matrix(alpha)) #
        alpha <- matrix(alpha, ncol = 1)#
    k <- nrow(alpha)#
    z <- matrix(nrow = k, ncol = 4)#
    for (i in 1:k) {#
        m$alpha <- alpha[i, ]#
        z[i, ] <- eval(m, sys.frame(sys.parent()))#
    }#
    ret <- list(alpha = alpha, cri = "GCV", df = z[, df], values = z[, #
        4])#
    #class(ret) <- "gcvplot"#
    ret#
}
gcvplotmod(y~x,alpha=seq(.1,1,by=.05),df=2)
class
gcv
gcvplot
a=array(0,c(2,2,1))
a
a[,,1]
a=array(0,c(2,2,2))
a
a[,1,]
a
a=array(0,c(2,4,2))
a
a[,1:2,]
a[,2:2,]
b=1
length(b)
array(a[,1,],c(1,1,2))
a[,1,]
array(a[,1,],c(1,1,2))
array(a[,1,],c(2,1,2))
length(a[,,1])
a[,,1]
b=c(0,0,0)
dim(b)
dim(a[,,1])
dim(a[,1,1])
a[,1,1]
french.dates <- c("7-déc-07",  "11-déc-07", "14-déc-07", "18-déc-07",  #
"21-déc-07", "24-déc-07", "26-déc-07", "28-déc-07", "31-déc-07", "2- #
jan-08",  "4-jan-08",  "7-jan-08", "9-jan-08", "11-jan-08", "14- #
jan-08", "16-jan-08", "18-jan-08", "21-jan-08", "23-jan-08", "25- #
jan-08", "28-jan-08")#
#
as.Date(french.dates, "%d-%b-%y")
sessionInfo()
1+2
c(1,2,3)
a=matrix(0,nrow=2,ncol=2)
a
a[1,]
a[,1]
a[1,1]
a
a=matrix(rbind(c(1,2),c(3,4)),nrow=2,ncol=2)
a
a=rbind(c(1,2),c(3,4))
a
a[,1]
a[,1]=1:2
a
a:4
1:4
seq(1,4,.1)
mymean=function(x){mean(x)}
mymean(c(1:10))
c(1:10)
source('~/Desktop/script.r')
a
c
a<-10
10->a
help(commandArgs)
a=c(1:10)
a[-2:3]
a[2:3]
a[-2:-3]
a[-2:-6]
a[c(1,4,9)]
x=c(1.842,0,.919)
y=c(2.485,2.857,1.17)
plot(x,y)
xq=(.46,1.38,.921)
xq=c(.46,1.38,0.921)
yq=c(2.314,2.119,2.662)
plot(xq,yq,col=red)
plot(xq,yq,col='red')
plot(x,y)
points(xq,yq,col='red')
lines(x,y)
  x=c( 1.842,     0.000,     0.919,     0.460,     1.381,     0.921,)#
     y=c(2.468  ,   2.857  ,   1.770   ,  2.314   ,  2.119   ,  2.662,2.468)
  x=c( 1.842,     0.000,     0.919,     0.460,     1.381,     0.921,1.842)#
     y=c(2.468  ,   2.857  ,   1.770   ,  2.314   ,  2.119   ,  2.662,2.468)
x
t
y
plot(x,y)
lines(x,y.col='red')
lines(x,y,col='red')
h=c(1,.7,.7,1)
x=c(0,1/11,10/11,1)
plot(x,h,xlim=c(.6,1),col='blue')
plot(x,h,xlim=c(.6,1),col='blue',type='l')
plot(x,h,ylim=c(.6,1),col='blue',type='l')
setwd('~/Desktop/codes/nsfem/datafiles/')
system('ls')
source('exit_profile.R')
source('plot_solvetimes.r')
?pdf
source('plot_solvetimes.r')
warnings()
source('plot_solvetimes.r')
pdfFonts()
names(pdfFonts())
?par
source('plot_solvetimes.r')
warnings()
source('plot_solvetimes.r')
quartzFonts()
source('plot_solvetimes.r')
?quartzFont
quartzFonts('serif')
source('plot_solvetimes.r')
quartzFont(quartzFont$serif)
source('plot_solvetimes.r')
quartzFonts$serif
quartzFonts
quartzFonts()
source('plot_solvetimes.r')
source('exit_profile.R')
dev.off
dev.off()
source('exit_profile.R')
source('error_plot.R')
min(u,v,p)
source('error_plot.R')
?legend
source('error_plot.R')
?par
?plot
source('error_plot.R')
?par
source('error_plot.R')
length(u,v,p)
size()
source('error_plot.R')
source('exit_profile.R')
source('error_plot.R')
20/3
